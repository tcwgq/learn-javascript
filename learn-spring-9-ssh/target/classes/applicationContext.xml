<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 开启注解扫描 -->
	<context:component-scan base-package="com.tcwgq" />

	<!-- 1. 通过xml方式加载properties文件 -->
	<!-- 加载properties文件 -->
	<context:property-placeholder location="classpath:*.properties" />

	<!-- 与上面的配置等价，下面的更容易理解 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<!-- PropertyPlaceholderConfigurer类中有个locations属性，接收的是一个数组，即我们可以在下面配好多个properties文件 -->
		<property name="locations">
			<array>
				<value>classpath:jdbc.properties</value>
			</array>
		</property>
	</bean>
	<!-- 虽然看起来没有上面的<context:property-placeholder location=""/>简洁，但是更加清晰，建议使用后面的这种。但是这个只限于xml的方式，即在beans.xml中用${key}获取配置文件中的值value。 -->

	<!-- 2. 通过注解方式加载properties文件 -->
	<!-- 还有一种就是通过注解的方式，在Java代码中使用@Value注解来加载配置文件中的值。 -->
	<!-- 第二种方式是使用注解的方式注入，主要用在java代码中使用注解注入properties文件中相应的value值 -->
	<bean id="prop"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<!-- 这里是PropertiesFactoryBean类，它也有个locations属性，也是接收一个数组，跟上面一样 -->
		<property name="locations">
			<array>
				<value>classpath:public.properties</value>
			</array>
		</property>
	</bean>

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- <property name="configLocations" value="classpath:hibernate.cfg.xml" 
			/> -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
			</props>
		</property>
		<property name="mappingResources">
			<list>
				<!-- 此处不能加classpath前缀 -->
				<value>com/tcwgq/model/User.hbm.xml</value>
			</list>
		</property>
	</bean>


	<!-- hibernate事务需要手动配置 -->
	<!-- 1.配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 2.开启事务注解管理 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate5.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 引入其他的配置文件 -->
	<import resource="classpath:beans.xml" />

</beans>